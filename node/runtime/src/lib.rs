//! Default node service implementation.
#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::weights::{constants, Weight};
use sp_runtime::traits::Block as BlockT;
use sp_runtime::Perbill;
use sp_std::prelude::*;

#[cfg(feature = "std")]
include!(concat!(env!("OUT_DIR"), "/wasm_binary.rs"));

pub type Hasher = sp_runtime::traits::BlakeTwo256;
pub type Hash = sp_core::H256;
pub type BlockNumber = u32;
pub type Header = sp_runtime::generic::Header<BlockNumber, Hasher>;
pub type SignedExtra = (
    frame_system::CheckSpecVersion<Runtime>,
    frame_system::CheckTxVersion<Runtime>,
    frame_system::CheckGenesis<Runtime>,
    frame_system::CheckEra<Runtime>,
    frame_system::CheckNonce<Runtime>,
    frame_system::CheckWeight<Runtime>,
);
pub type UncheckedExtrinsic = sp_runtime::generic::UncheckedExtrinsic<
    sp_runtime::AccountId32,
    Call,
    sp_runtime::MultiSignature,
    SignedExtra,
>;
pub type Block = sp_runtime::generic::Block<Header, UncheckedExtrinsic>;
pub type OpaqueBlock = sp_runtime::generic::Block<Header, sp_runtime::OpaqueExtrinsic>;
pub type Executive = frame_executive::Executive<
    Runtime,
    Block,
    frame_system::ChainContext<Runtime>,
    Runtime,
    AllModules,
>;
pub type AuraId = sp_consensus_aura::sr25519::AuthorityId;
pub type GrandpaId = sp_finality_grandpa::AuthorityId;

pub const VERSION: sp_version::RuntimeVersion = sp_version::RuntimeVersion {
    spec_name: sp_runtime::create_runtime_str!("sunshine-node-utils"),
    impl_name: sp_runtime::create_runtime_str!("sunshine-node-utils"),
    authoring_version: 1,
    spec_version: 1,
    impl_version: 1,
    apis: RUNTIME_API_VERSIONS,
    transaction_version: 1,
};

#[cfg(feature = "std")]
pub fn native_version() -> sp_version::NativeVersion {
    sp_version::NativeVersion {
        runtime_version: VERSION,
        can_author_with: Default::default(),
    }
}

frame_support::construct_runtime!(
    pub enum Runtime where
        Block = Block,
        NodeBlock = OpaqueBlock,
        UncheckedExtrinsic = UncheckedExtrinsic
    {
        System: frame_system::{Module, Call, Storage, Config, Event<T>},
    }
);

frame_support::parameter_types! {
    pub const BlockHashCount: BlockNumber = 2400;
    pub const MaximumBlockWeight: Weight = 2 * constants::WEIGHT_PER_SECOND;
    pub const AvailableBlockRatio: Perbill = Perbill::from_percent(75);
    pub const MaximumBlockLength: u32 = 5 * 1024 * 1024;
    pub const Version: sp_version::RuntimeVersion = VERSION;
}

impl frame_system::Trait for Runtime {
    // Generated by construct_runtime!
    type Origin = Origin;
    type Call = Call;
    type Event = Event;
    type Version = Version;
    type PalletInfo = PalletInfo;

    // Basic types
    type Hashing = Hasher;
    type Hash = Hash;
    type BlockNumber = BlockNumber;
    type Header = Header;
    type AccountId = sp_runtime::AccountId32;
    type Index = u32;
    type AccountData = ();
    type Lookup = sp_runtime::traits::IdentityLookup<Self::AccountId>;

    // Config
    type BaseCallFilter = ();
    type BlockHashCount = BlockHashCount;
    type MaximumBlockWeight = MaximumBlockWeight;
    type AvailableBlockRatio = AvailableBlockRatio;
    type MaximumBlockLength = MaximumBlockLength;
    type MaximumExtrinsicWeight = ();
    type SystemWeightInfo = ();
    type DbWeight = constants::RocksDbWeight;
    type ExtrinsicBaseWeight = constants::ExtrinsicBaseWeight;
    type BlockExecutionWeight = constants::BlockExecutionWeight;

    // Events
    type OnNewAccount = ();
    type OnKilledAccount = ();
}

sp_api::impl_runtime_apis! {
    impl sp_api::Core<Block> for Runtime {
        fn version() -> sp_version::RuntimeVersion {
            VERSION
        }

        fn execute_block(block: Block) {
            Executive::execute_block(block)
        }

        fn initialize_block(header: &<Block as BlockT>::Header) {
            Executive::initialize_block(header)
        }
    }

    impl sp_api::Metadata<Block> for Runtime {
        fn metadata() -> sp_core::OpaqueMetadata {
            Runtime::metadata().into()
        }
    }

    impl sp_block_builder::BlockBuilder<Block> for Runtime {
        fn apply_extrinsic(extrinsic: <Block as BlockT>::Extrinsic) -> sp_runtime::ApplyExtrinsicResult {
            Executive::apply_extrinsic(extrinsic)
        }

        fn finalize_block() -> <Block as BlockT>::Header {
            Executive::finalize_block()
        }

        fn inherent_extrinsics(data: sp_inherents::InherentData) -> Vec<<Block as BlockT>::Extrinsic> {
            data.create_extrinsics()
        }

        fn check_inherents(
            block: Block,
            data: sp_inherents::InherentData,
        ) -> sp_inherents::CheckInherentsResult {
            data.check_extrinsics(&block)
        }

        fn random_seed() -> <Block as BlockT>::Hash {
            Default::default()
        }
    }

    impl sp_transaction_pool::runtime_api::TaggedTransactionQueue<Block> for Runtime {
        fn validate_transaction(
            source: sp_runtime::transaction_validity::TransactionSource,
            tx: <Block as BlockT>::Extrinsic,
        ) -> sp_runtime::transaction_validity::TransactionValidity {
            Executive::validate_transaction(source, tx)
        }
    }

    impl sp_offchain::OffchainWorkerApi<Block> for Runtime {
        fn offchain_worker(header: &<Block as BlockT>::Header) {
            Executive::offchain_worker(header)
        }
    }

    impl sp_consensus_aura::AuraApi<Block, AuraId> for Runtime {
        fn slot_duration() -> u64 {
            1
        }

        fn authorities() -> Vec<AuraId> {
            Default::default()
        }
    }

    impl sp_session::SessionKeys<Block> for Runtime {
        fn generate_session_keys(_seed: Option<Vec<u8>>) -> Vec<u8> {
            Default::default()
        }

        fn decode_session_keys(
            _encoded: Vec<u8>,
        ) -> Option<Vec<(Vec<u8>, sp_core::crypto::KeyTypeId)>> {
            Default::default()
        }
    }

    impl sp_finality_grandpa::GrandpaApi<Block> for Runtime {
        fn grandpa_authorities() -> sp_finality_grandpa::AuthorityList {
            Default::default()
        }

        fn submit_report_equivocation_unsigned_extrinsic(
            _equivocation_proof: sp_finality_grandpa::EquivocationProof<
                <Block as BlockT>::Hash,
                sp_api::NumberFor<Block>,
            >,
            _key_owner_proof: sp_finality_grandpa::OpaqueKeyOwnershipProof,
        ) -> Option<()> {
            None
        }

        fn generate_key_ownership_proof(
            _set_id: sp_finality_grandpa::SetId,
            _authority_id: GrandpaId,
        ) -> Option<sp_finality_grandpa::OpaqueKeyOwnershipProof> {
            None
        }
    }
}
